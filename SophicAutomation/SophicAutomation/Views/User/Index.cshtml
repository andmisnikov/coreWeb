@{
    ViewData["Title"] = "Home Page";
}

@model SophicAutomation.PageHelpers.PaginatedList<BL.Dto.UserDto>

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
</head>
<body>

    <div class="row">
        <div class="col-sm-8">
            <form asp-action="Index" method="get">
                <div class=form-actions no-color">
                    <p>
                        Find by name: <input type="text" name="searchString" value="@ViewData["CurrentFilter"]" />
                        <input type="submit" value="Search" class="btn btn-default" /> |
                        <a asp-action="Index">Clear</a>
                    </p>
                </div>
            </form>
        </div>
        <div class="col-sm-4">
            <div style="text-align: right;">
                <a asp-action="DownloadCsv"
                   asp-route-currentFilter="@ViewData["CurrentFilter"]"
                   class="btn btn-primary">
                    Export to CSV
                </a>
            </div>

        </div>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>User Name</th>
                <th>Email</th>
                <th>Name</th>
                <th>Surname</th>
                <th>City</th>
                <th>Street</th>
                <th>Zip</th>
                <th>RegisterDate</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.UserName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Email)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Surname)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.City)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Street)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Zip)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.RegisterDate)
                    </td>
                    <td>
                        <!--Buttons are not hidden to be able to check backend side quickly, should be hide in production for non-admin users-->
                        <a asp-action="Edit" asp-route-id="@item.Id">Edit</a>
                        <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @{
        var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
        var nextDisabled = !Model.HasNextPage ? "disabled" : "";
    }

    <div class="row">
        <div class="col-sm-8">
            <a asp-action="Index"
               asp-route-sortOrder="@ViewData["CurrentSort"]"
               asp-route-pageNumber="@(Model.PageIndex - 1)"
               asp-route-currentFilter="@ViewData["CurrentFilter"]"
               class="btn btn-primary @prevDisabled">
                Previous
            </a>
            <a asp-action="Index"
               asp-route-sortOrder="@ViewData["CurrentSort"]"
               asp-route-pageNumber="@(Model.PageIndex + 1)"
               asp-route-currentFilter="@ViewData["CurrentFilter"]"
               class="btn btn-primary @nextDisabled">
                Next
            </a>
        </div>
        <div class="col-sm-4">
            <div style="text-align: right;">
                <span class="label label-default">Page @Model.PageIndex / @Model.TotalPages </span>
            </div>
        </div>
    </div>
</body>
</html>